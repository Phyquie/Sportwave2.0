// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  name               String?
  age                Int
  gender             gender
  contactnumber      String
  profileUrl         String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  eventsCreated      Event[]    @relation("EventsCreated")
  eventsParticipated Event[]    @relation("EventsParticipated")
  teamsCreated       Team[]     @relation("TeamsCreated")
  teamsJoined        Team[]     @relation("TeamsJoined")
  friends            User[]     @relation("UserFriends")
  friendOf           User[]     @relation("UserFriends")
  defaultLocation    String
  likedSports        sports[]
  eventwishlist      wishList[] @relation("WishlistCreated")
  InstagramLink      String?
  XLink              String?
  WhatsAppLink       String?
  DiscordLink        String?
  YoutubeLink        String?
}

enum gender {
  male
  female
}

enum sports {
  cricket
  football
  badminton
  basketball
  tennis
  volleyball
  tableTennis
  hockey
  swimming
  athletics
  boxing
  wrestling
  gymnastics
  cycling
  rugby
  golf
  skiing
  skateboarding
  surfing
  martialArts
  yoga
  pilates
  dance
  crossfit
  weightlifting
  rowing
  climbing
}

model wishList {
  id          String @id @default(cuid())
  createdById String
  createdBy   User   @relation("WishlistCreated", fields: [createdById], references: [id])
}

enum eventType {
  soloEvent
  teamEvent
}

model Event {
  id           String    @id @default(cuid())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdById  String
  createdBy    User      @relation("EventsCreated", fields: [createdById], references: [id])
  eventType    eventType @default(soloEvent)
  participants User[]    @relation("EventsParticipated")
  teamId       String?
  team         Team?     @relation("team", fields: [teamId], references: [id])
  date         DateTime
  location     String
  description  String?
  images       String[]
  sportType    sports
}

model Team {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation("TeamsCreated", fields: [createdById], references: [id])
  events      Event[]  @relation("team")
  members     User[]   @relation("TeamsJoined")
  sport       String
  location    String
  teamImage   String?
  sportType   sports
}
